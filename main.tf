# main.tf (Root Module)

#-----------------------------------------------------------------------------
# PROVIDER CONFIGURATION
#-----------------------------------------------------------------------------

terraform {
  required_providers {
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~> 2.36"
    }
    local = {
      source  = "hashicorp/local"
      version = "~> 2.5"
    }
  }
}

provider "kubernetes" {
  config_path    = "~/.kube/config"
  config_context = "minikube"
}

#-----------------------------------------------------------------------------
# OUTPUT DIRECTORY SETUP
#-----------------------------------------------------------------------------

# Create local directory for outputs if it doesn't exist
resource "local_file" "ensure_output_dir" {
  content     = "# This directory contains Kubernetes cluster analysis files generated by Terraform"
  filename    = "${var.output_path}/.keep"
  
  provisioner "local-exec" {
    command = "mkdir -p ${var.output_path}"
  }
}

#-----------------------------------------------------------------------------
# CLUSTER ANALYZER MODULE
#-----------------------------------------------------------------------------

module "cluster_analyzer" {
  source = "./modules/cluster-analyzer"
  
  # Base configuration - use the variable for output path
  output_path = var.output_path
  
  # Optional features (enable or disable as needed)
  include_node_info = true
  include_deployment_details = true
  
  # Health threshold configuration
  # Percentage of running pods required for the cluster to be considered healthy
  # health_threshold = 85  # Uncomment to override default (90%)
  
  # Namespace filtering (must be set to [] to include all namespaces)
  # Default ignores control plane namespaces: kube-system, kube-public, kube-node-lease
  # ignore_namespaces = []  # Uncomment to include all namespaces
  # ignore_namespaces = ["kube-system", "kube-public"]  # Uncomment to customize ignored namespaces

  # AI prompt configuration
  analysis_type = var.analysis_type # standard, health, performance, security, troubleshooting, comprehensive
  cluster_platform = var.cluster_platform # MacBook Pro M1 Max
  cluster_cpu = var.cluster_cpu # 6-Core CPU
  cluster_memory = var.cluster_memory # 12GB
  cluster_runtime = var.cluster_runtime # Docker
}

#-----------------------------------------------------------------------------
# CORE OUTPUTS
#-----------------------------------------------------------------------------

# Quick-access health status
output "is_cluster_healthy" {
  description = "Simple boolean indicating if the cluster meets the health threshold"
  value       = module.cluster_analyzer.is_healthy
}

# List of available analysis types for Kubernetes cluster analysis
output "available_analysis_types" {
  description = "List of available analysis types for Kubernetes cluster analysis"
  value       = ["standard", "health", "performance", "security", "troubleshooting", "comprehensive"]
}

output "ai_prompt_path" {
  description = "Path to the generated AI prompt file for analysis"
  value       = module.cluster_analyzer.ai_prompt_path
}

#-----------------------------------------------------------------------------
# HEALTH SUMMARY OUTPUTS
#-----------------------------------------------------------------------------

# Comprehensive health summary
output "cluster_health_summary" {
  description = "Key metrics about cluster health in a concise format"
  value = {
    status            = module.cluster_analyzer.health_status
    health_percentage = module.cluster_analyzer.health_percentage
    health_threshold  = module.cluster_analyzer.health_threshold
    total_pods        = module.cluster_analyzer.cluster_summary.total_pods
    running_pods      = module.cluster_analyzer.running_pods_count
    problematic_pods  = module.cluster_analyzer.problematic_pods_count
    namespaces_count  = length(module.cluster_analyzer.namespace_list)
  }
}

#-----------------------------------------------------------------------------
# DETAILED OUTPUTS
#-----------------------------------------------------------------------------

# Detailed health information
output "health_details" {
  description = "Comprehensive health metrics for detailed analysis"
  value = {
    # Health metrics
    status            = module.cluster_analyzer.health_status
    health_percentage = module.cluster_analyzer.health_percentage
    health_threshold  = module.cluster_analyzer.health_threshold
    is_healthy        = module.cluster_analyzer.is_healthy
    
    # Pod metrics
    total_pods          = module.cluster_analyzer.cluster_summary.total_pods
    running_pods        = module.cluster_analyzer.running_pods_count
    problematic_pods    = module.cluster_analyzer.problematic_pods_count
    
    # Namespace metrics
    namespaces          = module.cluster_analyzer.namespace_list
    namespaces_count    = length(module.cluster_analyzer.namespace_list)
    
    # Optional enhanced metrics (if enabled)
    node_metrics        = module.cluster_analyzer.node_data != null ? {
      count = length(module.cluster_analyzer.node_data)
      names = [for node in module.cluster_analyzer.node_data : node.name]
    } : null
    
    deployment_metrics  = module.cluster_analyzer.deployment_data != null ? {
      count = length(module.cluster_analyzer.deployment_data)
      problematic = length(module.cluster_analyzer.problematic_deployments)
    } : null
    
    # Output file locations
    health_status_file  = module.cluster_analyzer.health_status_path
    ai_prompt_file      = module.cluster_analyzer.ai_prompt_path
    summary_file        = module.cluster_analyzer.cluster_summary_path
  }
}

# Detailed pod groupings
output "detailed_pod_groupings" {
  description = "Detailed pod groupings by namespace and status"
  value = {
    hierarchical_grouping = module.cluster_analyzer.pods_by_namespace_and_status
    by_namespace = module.cluster_analyzer.namespace_summary
    by_status = module.cluster_analyzer.status_summary
  }
}
#-----------------------------------------------------------------------------
# FILE PATH OUTPUTS
#-----------------------------------------------------------------------------

# Output paths to generated files
output "generated_files" {
  description = "Paths to all generated analysis files"
  value = {
    ai_prompt                  = module.cluster_analyzer.ai_prompt_path
    cluster_summary            = module.cluster_analyzer.cluster_summary_path
    raw_pod_data               = module.cluster_analyzer.raw_pod_data_path
    health_status              = module.cluster_analyzer.health_status_path
    problematic_pods           = module.cluster_analyzer.problematic_pods_path
    node_data                  = module.cluster_analyzer.node_data_path
    deployment_data            = module.cluster_analyzer.deployment_data_path
    namespace_summary          = module.cluster_analyzer.namespace_summary_path
    status_summary             = module.cluster_analyzer.status_summary_path
    pods_by_namespace_and_status = module.cluster_analyzer.pods_by_namespace_and_status_path
  }
}